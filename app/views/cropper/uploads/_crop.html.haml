- upload ||= @upload
- prefix = upload.holder_column
- multiplier ||= (params[:multiplier] || 1).to_i

- target_w = upload.crop_width / multiplier
- target_h = upload.crop_height / multiplier

- max_w = upload.precrop_width / multiplier
- max_h = upload.precrop_height / multiplier

- initial_w = upload.scale_width? ? upload.scale_width / multiplier : max_w * 3 / 4
- initial_h = upload.scale_height? ? upload.scale_height / multiplier : max_h * 3 / 4

- offset_l = upload.offset_left? ? upload.offset_left / multiplier : (target_w - initial_w)/2
- offset_t = upload.offset_top? ? upload.offset_top / multiplier : (target_h - initial_h)/2

.cropper
  .preview{:style => "width: #{initial_w}px; height: #{initial_h}px; top: #{offset_t}px; left: #{offset_l}px"}
    %img{:src => upload.file.url(:precrop)}

  %p.drag_instructions
    = t :drag_instructions
    
  = fields_for upload.holder do |hf|
    = hf.fields_for :"#{upload.holder_column}_upload", upload do |uf|
      %fieldset.crop
        = uf.hidden_field :id, :data => {:"clear-on-detach" => true}
        = uf.hidden_field :offset_left, :value => offset_l, :class => 'ol'
        = uf.hidden_field :offset_top, :value => offset_t, :class => 'ot'
        = uf.hidden_field :multiplier, :value => multiplier
        .scaler
          %p.range
            = uf.range_field :scale_width, :min => target_w, :max => max_w, :value => initial_w, :class => 'sw'
            = uf.hidden_field :scale_height, :value => initial_h, :class => 'sh'
